# -*- coding: utf-8 -*-
"""IRIS_FLOWER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DQAKaLvGvDosCI-iEcVzea7Dk51yJTwV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import joblib

from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
StandardScaler = StandardScaler()
X_train = StandardScaler.fit_transform(X_train)
X_test = StandardScaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=50)
rfc.fit(X_train, y_train)

pred_rfc = rfc.predict(X_test)
acc_train = round(rfc.score(X_train, y_train) * 100, 2)
acc_val = round(rfc.score(X_test, y_test) * 100, 2)
print('accuracy of train dataset'+str(acc_train))
print('accuracy of test dataset'+str(acc_val))

joblib.dump(rfc, 'rfc.sav')

import subprocess
import sys

# Function to install a package using pip
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Example: Install the 'streamlit' package
install("streamlit")

import streamlit as st


import streamlit as st
import pandas as pd
import numpy as np
from prediction_py import predict

st.title('Iris Flower Prediction')
st.markdown('toy model to play to classify iris flower into \ setosa, versicolor, virginica')

st.header('plants features')
col1, col2 = st.columns(2)
with col1:
  st.text('sepal chracterstics')
  sepal_length=st.slider('sepal length (cm)', 1.0, 8.0, 0.5)
  sepal_width=st.slider('sepal width (cm)', 2.0, 4.4, 0.5)

with col2:
  st.text('petal chracterstics')
  petal_length=st.slider('petal length (cm)', 1.0, 7.5,1.2)
  petal_width=st.slider('petal width (cm)', 3.5, 7.0, 0.5)

import joblib
def predict(input_data):
    rfc = joblib.load('rfc.sav')
    prediction = rfc.predict(input_data)
    return rfc,predict(data)



if st.button('Predict Flower Type'):
    result = predict(np.array([['sepal_length','sepal_width','petal_length','petal_width']]))
    st.text(result)
